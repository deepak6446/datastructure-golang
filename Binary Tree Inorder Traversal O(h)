# Binary Tree Inorder Traversal

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
// type Stack struct {
//     Next *TreeNode
// }
import ("fmt")
//iterative approach
func inorderTraversal(root *TreeNode) []int {
    
    output := make([]int, 0)
    
    if root == nil {
        return output
    }
    
    stack := make([]*TreeNode, 0)
    
    for 1==1 {
        if root != nil {
            stack = append(stack, root)
            root = root.Left
        }else {
            if len(stack) == 0 {
                break
            }
            root = stack[len(stack)-1]
            output = append(output, root.Val)
            stack = stack[:len(stack)-1]
            root = root.Right
        }
        
    }
    return output
}
