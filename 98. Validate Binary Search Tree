98. Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
import(
    "math"
    "fmt"
)

func valid(root *TreeNode, max int, min int) bool {
    if root == nil {
        return true
    }
    
    if root.Val >= max || root.Val <= min {
        return false
    }
    return valid(root.Left, root.Val, min) && valid(root.Right, max, root.Val)
}

func isValidBST(root *TreeNode) bool {
    return valid(root, math.MaxInt64, math.MinInt64)
}
