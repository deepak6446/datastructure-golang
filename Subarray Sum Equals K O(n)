Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2
 
/*
* target=7
* hash is used to store prevSum
* here hash[14] = 6
*.         0  1  2. 3.  4.   5.  6.  7.  8.  9
*          1, 2, 4, 5,  6,  -3, -1,  5,  3,  6
* prevSum  1, 3, 7, 12, 18, 15, 14, 19, 21, 27
* if prevSum == target count++
* else if hash[prevSum-k] exist {
*     count++
*.    from index hash[prevSum-k] till current index the sum is target
* }
*  
*/
func subarraySum(nums []int, k int) int {
    if len(nums)==0 {
        return 0
    }
    hash:=make(map[int]int)
    prevSum:=0
    count:=0
    
    for i:=0;i<len(nums);i++ {
        currSum:=prevSum+nums[i]
        if currSum == k {     //subarray can be formed using the only element 
            count++
        }
        
        if hash[currSum-k] !=0 {
            count = count + hash[currSum-k]
        }
        
        hash[currSum]++
        prevSum = currSum
    }
    return count
    
}
